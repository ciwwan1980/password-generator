{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","useState","password","setPassword","passwordLength","setPasswordLength","big","setBig","special","setSpecial","characters","createPassword","length","ourPassword","allCharacters","console","log","i","randomNumber","Math","floor","random","className","onSubmit","e","preventDefault","name","value","readOnly","onChange","target","type","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAEe,SAASA,IAAQ,IAAD,EAEEC,mBAAS,IAFX,mBAEpBC,EAFoB,KAEXC,EAFW,OAGcF,mBAAS,IAHvB,mBAGpBG,EAHoB,KAGLC,EAHK,OAIPJ,oBAAS,GAJF,mBAInBK,EAJmB,KAIfC,EAJe,OAKEN,oBAAS,GALX,mBAKlBO,EALkB,KAKVC,EALU,KAOxBC,EAAa,uCAWdC,EAAe,SAACC,GAClB,IAAIC,EAAY,GACZC,EAAcJ,EAClBK,QAAQC,IAAIF,EAAe,wBAC3BC,QAAQC,IAAIN,EAAW,sBACpBJ,IACAQ,GAhBc,8BAkBdN,IACCM,GAlBiB,aAoBrB,IAAI,IAAIG,EAAE,EAAEA,EAAEL,EAAO,EAAEK,IAAI,CACvBF,QAAQC,IAAIF,GACZ,IAAII,EAAcC,KAAKC,MAAMD,KAAKE,SAASP,EAAcF,QACzDG,QAAQC,IAAI,aAAaE,GAEzBL,GAAaC,EAAcI,GAC3BH,QAAQC,IAAI,sBAAuBH,GAEvCV,EAAYU,IAGZ,OACI,yBAAKS,UAAU,WACnB,0BAAMC,SA9BS,SAACC,GAChBA,EAAEC,iBACFV,QAAQC,IAAIG,KAAKC,MAAMD,KAAKE,SAASX,EAAWE,SAChDD,EAAeP,IA2BekB,UAAU,gBAExC,8BAAUA,UAAU,UAGhB,wCACA,2BAAOI,KAAK,WAAWC,MAAOzB,EAAU0B,UAAQ,IAChD,4BAAQN,UAAU,iBAAlB,sBAGJ,kCAEA,+BAAO,0CAEC,gDAEI,2BAAOI,KAAK,iBAAiBC,MAAOvB,EAAgByB,SAAU,SAACL,GAAD,OAAKnB,EAAkBmB,EAAEM,OAAOH,WAGlG,+BACA,2BAAOI,KAAK,WAAWL,KAAK,MAAMM,QAAS1B,EAAKuB,SAAU,SAACL,GAAD,OAAKjB,GAAQD,MADvE,gBAKA,+BACI,2BAAOyB,KAAK,WAAWL,KAAK,UAAUM,QAASxB,EAASqB,SAAU,SAACL,GAAD,OAAKf,GAAYD,MADvF,kBCvDGyB,MARf,WACE,OACE,yBAAKX,UAAU,OACf,kBAACtB,EAAD,QCIgBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.4e560a47.chunk.js","sourcesContent":["import React,{useState} from 'react'\n\nexport default function Form() {\n\n    const [password,setPassword]=useState(\"\")\n    const [passwordLength,setPasswordLength]=useState(12)\n     const [big,setBig]=useState(true)\n      const [special,setSpecial]=useState(true)\n\n   let characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n       let bigCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n       let specialChar = \"!ยง$%&?\";\n    \n\nconst handleSubmit=(e)=>{\n    e.preventDefault()\n    console.log(Math.floor(Math.random()*characters.length))\n    createPassword(passwordLength)\n}\n\nconst createPassword=(length)=>{\n    let ourPassword=\"\";\n    let allCharacters=characters;\n    console.log(allCharacters, \".......allcharacters\")\n    console.log(characters,\"characters........\")\n    if(big){\n       allCharacters =allCharacters + bigCase\n    }\n    if(special){\n        allCharacters =allCharacters + specialChar\n    }\n    for(let i=0;i<length-1;i++){\n        console.log(allCharacters)\n        let randomNumber= Math.floor(Math.random()*allCharacters.length)\n        console.log(\"random....\",randomNumber)\n        \n        ourPassword+=allCharacters[randomNumber]\n        console.log(\"ourpassword........\", ourPassword)\n    }\n    setPassword(ourPassword)\n}\n\n    return (\n        <div className=\"wrapper\">    \n    <form onSubmit={handleSubmit} className=\"form-wrapper\" >\n \n    <fieldset className=\"header\">\n\n\n        <h1> Result:</h1> \n        <input name=\"password\" value={password} readOnly/>\n        <button className=\"createAccount\">Generate Password</button>\n    </fieldset>\n\n    <fieldset>\n\n    <label><span>Setting</span></label>\n            \n            <label>\n                Passwordlength\n                <input name=\"passwordLength\" value={passwordLength} onChange={(e)=>setPasswordLength(e.target.value)} />\n            </label>\n            \n            <label>\n            <input type=\"checkbox\" name=\"big\" checked={big} onChange={(e)=>setBig(!big)} />\n                useMixedCase\n            </label>\n            \n            <label>\n                <input type=\"checkbox\" name=\"special\" checked={special} onChange={(e)=>setSpecial(!special)} />\n                specialCase\n            </label>\n    </fieldset>\n\n</form>\n\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Form from \"./components/Form\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Form/>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}